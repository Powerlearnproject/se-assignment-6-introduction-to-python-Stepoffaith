1. Python is a high-level, interpreted programming language known for its simplicity and readability, what makes it popular is some of these facts
Easy to Learn and Use
Extensive Standard Library
Versatile and Flexible
Cross-Platform Compatibility
Some use cases where Python is particularly effective include:
Web Development
Data Science and Machine Learning
Automation and Scripting
Software Development
Prototyping

2. Steps to install Python on Windows and set up a virtual environment:
Download Python for windows and choose between 32-bit or 64-bit. 
Run the Python Installer
Check the box that says "Add Python to PATH" during the installation process.
   - Click on the "Install Now" button to start the installation process. 
Verify Python Installation
Open the Command Prompt by searching for "cmd" in the Windows search bar and clicking on the Command Prompt app.
Type `python --version` in the Command Prompt and press Enter. You should see the Python version number displayed, confirming that Python is successfully installed.
Set Up a Virtual Environment
install the virtualenv package by running `pip install virtualenv` in the Command Prompt.
Create a Virtual Environment
Navigate to the directory where you want to create your project folder.
Run the command `virtualenv venv` to create a new virtual environment named "venv".

3.
print("Hello, World!")


`print()` is a built-in Python function used to display output to the console. It takes an argument (in this case, the string "Hello, World!") and prints it to the console.
- `"Hello, World!"`: This is a string literal in Python. A string is a sequence of characters enclosed within single quotes `'` or double quotes `"`.

4. int is Whole numbers without a decimal point.
Float is Numbers with a decimal point or in exponential form.
Str is Sequences of characters enclosed in single, double, or quotes.
Booleans Represents True or False.
Lists: Ordered collections of items enclosed in square brackets.
Tuples: Ordered, immutable collections enclosed in parentheses.
Dictionaries: Unordered collections of key-value pairs enclosed in curly braces.
# Integers
my_int = 42

# Floating-point numbers
my_float = 3.14

# Strings
my_string = "Hello, World!"

# Booleans
my_bool = True

# Lists
my_list = [1, 2, 3, 4, 5]

# Tuples
my_tuple = (10, 20, 30)

# Dictionaries
my_dict = {"key1": "value1", "key2": "value2"}

# Print out the variables
print("Integer:", my_int)
print("Float:", my_float)
print("String:", my_string)
print("Boolean:", my_bool)
print("List:", my_list)
print("Tuple:", my_tuple)
print("Dictionary:", my_dict)

5. In Python, conditional statements are utilized to execute certain code based on a condition being true or false, while loops are used to repeat a block of code multiple times.

num = 10

if num > 0:
    print("Number is positive")
else:
    print("Number is not positive")

# Example of a for loop
fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    print(fruit)

6. Functions in Python are reusable blocks of code that perform a specific task. They help in organizing code, reducing redundancy, and improving readability.

def add_numbers(a, b):
    return a + b
result = add_numbers(5, 3)
print(result)  # Output: 8

7. Lists are ordered collections of items where each item has an index associated with it.
- Lists are defined using square brackets `[]` and can contain elements of any data type.

2. Dictionaries are unordered collections of key-value pairs.
They are defined using curly braces `{}` and consist of keys and values separated by a colon.
- Values in a dictionary are accessed using their corresponding keys, not by index.
- Dictionaries are mutable like lists.

# Creating a list of numbers
numbers_list = [1, 2, 3, 4, 5]

# Creating a dictionary with key-value pairs
my_dict = {
    "name": "Alice",
    "age": 30,
    "city": "New York"
}

# Accessing elements in the list
print("List:")
for num in numbers_list:
    print(num)

# Accessing elements in the dictionary
print("\nDictionary:")
for key, value in my_dict.items():
    print(f"{key}: {value}")

# Modifying list
numbers_list.append(6)
print("\nList after appending element:")
print(numbers_list)

# Modifying dictionary
my_dict["age"] = 31
print("\nDictionary after updating age:")
print(my_dict)

# Removing element from list
numbers_list.remove(3)
print("\nList after removing element:")
print(numbers_list)

# Removing key from dictionary
del my_dict["city"]
print("\nDictionary after deleting key 'city':")
print(my_dict)


8.Exception handling in Python allows you to handle errors or exceptions that occur during the execution of a program. This helps in ensuring that your program does not crash when unexpected issues arise.

try:
    # Code block where you expect an exception to occur
    num1 = int(input("Enter a number: "))
    num2 = int(input("Enter another number: "))
    result = num1 / num2

except ValueError:
    # This block will handle a ValueError exception
    print("Please enter valid numbers.")

except ZeroDivisionError:
    # This block will handle a ZeroDivisionError exception
    print("Cannot divide by zero.")

else:
    # This block will execute if no exceptions occur
    print("Result: ", result)

finally:
    # This block will always execute, regardless of whether an exception occurred or not
    print("Execution completed.")

# The program will continue to execute after the try-except block

9. In Python, modules are files containing Python code that define functions, classes, and variables. A package is a collection of modules structured in a folder hierarchy. It allows you to organize modules into subpackages for better organization and reusability.

import math

# Using functions from the math module
print(math.sqrt(16))  # Output: 4.0
print(math.pi)        # Output: 3.141592653589793

10. 
